// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exredrpc.proto

package exredrpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Msg struct {
	Payload              map[string]string `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Meta                 map[string]string `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab243556270e32cd, []int{0}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetPayload() map[string]string {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Msg) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*Msg)(nil), "exredrpc.Msg")
	proto.RegisterMapType((map[string]string)(nil), "exredrpc.Msg.MetaEntry")
	proto.RegisterMapType((map[string]string)(nil), "exredrpc.Msg.PayloadEntry")
}

func init() { proto.RegisterFile("exredrpc.proto", fileDescriptor_ab243556270e32cd) }

var fileDescriptor_ab243556270e32cd = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xad, 0x28, 0x4a,
	0x4d, 0x29, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xee,
	0x32, 0x72, 0x31, 0xfb, 0x16, 0xa7, 0x0b, 0x99, 0x70, 0xb1, 0x17, 0x24, 0x56, 0xe6, 0xe4, 0x27,
	0xa6, 0x48, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x1b, 0x49, 0xe9, 0xc1, 0xf5, 0xf8, 0x16, 0xa7, 0xeb,
	0x05, 0x40, 0x24, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0x60, 0x4a, 0x85, 0xb4, 0xb9, 0x58, 0x72,
	0x53, 0x4b, 0x12, 0x25, 0x98, 0xc1, 0x5a, 0xc4, 0x51, 0xb5, 0xf8, 0xa6, 0x96, 0x24, 0x42, 0xd4,
	0x83, 0x15, 0x49, 0x59, 0x71, 0xf1, 0x20, 0x9b, 0x22, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x29,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94,
	0xa6, 0x4a, 0x30, 0x81, 0xc5, 0x20, 0x1c, 0x2b, 0x26, 0x0b, 0x46, 0x29, 0x73, 0x2e, 0x4e, 0xb8,
	0x71, 0xa4, 0x68, 0x34, 0xb2, 0xe0, 0xe2, 0xf2, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x75, 0x2a,
	0x2d, 0x16, 0xd2, 0xe2, 0x62, 0x71, 0xce, 0x48, 0x2c, 0x11, 0xe2, 0x45, 0x71, 0xa9, 0x14, 0x2a,
	0x57, 0x89, 0x41, 0x83, 0xd1, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x54, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x88, 0x55, 0xdd, 0x5b, 0x3c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageBusClient is the client API for MessageBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageBusClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (MessageBus_ChatClient, error)
}

type messageBusClient struct {
	cc *grpc.ClientConn
}

func NewMessageBusClient(cc *grpc.ClientConn) MessageBusClient {
	return &messageBusClient{cc}
}

func (c *messageBusClient) Chat(ctx context.Context, opts ...grpc.CallOption) (MessageBus_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageBus_serviceDesc.Streams[0], "/exredrpc.MessageBus/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBusChatClient{stream}
	return x, nil
}

type MessageBus_ChatClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type messageBusChatClient struct {
	grpc.ClientStream
}

func (x *messageBusChatClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageBusChatClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageBusServer is the server API for MessageBus service.
type MessageBusServer interface {
	Chat(MessageBus_ChatServer) error
}

func RegisterMessageBusServer(s *grpc.Server, srv MessageBusServer) {
	s.RegisterService(&_MessageBus_serviceDesc, srv)
}

func _MessageBus_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageBusServer).Chat(&messageBusChatServer{stream})
}

type MessageBus_ChatServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type messageBusChatServer struct {
	grpc.ServerStream
}

func (x *messageBusChatServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageBusChatServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exredrpc.MessageBus",
	HandlerType: (*MessageBusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _MessageBus_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "exredrpc.proto",
}
